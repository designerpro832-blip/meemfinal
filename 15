import React, { useState, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { X, Download, Share2, ArrowLeft, ArrowRight, Loader2 } from 'lucide-react';
import { supabase } from '../lib/supabase';
import { Result, PosterTemplate } from '../types';
import DynamicPoster from './posters/DynamicPoster';
import { downloadPosterAsJpeg } from '../lib/downloadUtils';

const PosterModal: React.FC<{
  isOpen: boolean;
  onClose: () => void;
  data: { program: { event: string; category: string }; winners: Result[]; resultNumber: number } | null;
}> = ({ isOpen, onClose, data }) => {
  const [activeTemplates, setActiveTemplates] = useState<PosterTemplate[]>([]);
  const [loadingPosters, setLoadingPosters] = useState(true);
  const [activeStyle, setActiveStyle] = useState(0);
  const [isDownloading, setIsDownloading] = useState(false);

  useEffect(() => {
    if (!isOpen) return;

    const fetchAndSetPosters = async () => {
      setLoadingPosters(true);
      try {
        const { data: templates, error } = await supabase.from('poster_templates').select('*').eq('is_active', true).order('created_at');
        if (error) throw error;
        const validTemplates = templates.filter(t => t.styles && t.layout_name);
        setActiveTemplates(validTemplates as PosterTemplate[]);
      } catch (err) {
        console.error("Error fetching poster templates:", err);
        setActiveTemplates([]);
      } finally {
        setLoadingPosters(false);
        setActiveStyle(0);
      }
    };

    fetchAndSetPosters();
  }, [isOpen]);
  
  const activeTemplate = activeTemplates.length > 0 ? activeTemplates[activeStyle] : null;

  const handleDownloadClick = async () => {
    if (!activeTemplate || !data || isDownloading) return;

    setIsDownloading(true);
    try {
      const safeEventName = data.program.event.toLowerCase().replace(/[^a-z0-9]/g, '-') || 'poster';
      
      await downloadPosterAsJpeg({
        component: (
          <DynamicPoster
            template={activeTemplate}
            styles={activeTemplate.styles!}
            program={data.program}
            winners={data.winners}
            resultNumber={data.resultNumber}
          />
        ),
        width: activeTemplate.width,
        height: activeTemplate.height,
        fileName: `meemfest-result-${safeEventName}.jpeg`,
        backgroundImageUrl: activeTemplate.background_image_url,
      });

    } catch (err) {
      console.error('Failed to download image', err);
      alert('Sorry, there was an error downloading the poster. Please check your network and try again. If the issue persists, the poster background might be invalid.');
    } finally {
      setIsDownloading(false);
    }
  };

  const handleShare = async () => {
    if (!data) return;
    const shareData = {
      title: `Result: ${data.program.event}`,
      text: `Check out the results for ${data.program.event} - ${data.program.category} from Muhimmath!`,
      url: window.location.href,
    };
    try {
      if (navigator.share) {
        await navigator.share(shareData);
      } else {
        await navigator.clipboard.writeText(window.location.href);
        alert('Link copied to clipboard!');
      }
    } catch (err) {
      console.error('Failed to share', err);
    }
  };

  const nextStyle = () => setActiveStyle((prev) => (prev + 1) % activeTemplates.length);
  const prevStyle = () => setActiveStyle((prev) => (prev - 1 + activeTemplates.length) % activeTemplates.length);

  return (
    <AnimatePresence>
      {isOpen && (
        <motion.div initial={{ opacity: 0 }} animate={{ opacity: 1 }} exit={{ opacity: 0 }} className="fixed inset-0 bg-black bg-opacity-80 z-50 flex items-center justify-center p-2 sm:p-4" onClick={onClose}>
          <motion.div initial={{ scale: 0.9, y: 20 }} animate={{ scale: 1, y: 0 }} exit={{ scale: 0.9, y: 20 }} className="bg-ui-surface rounded-2xl w-full max-w-5xl h-full max-h-[98vh] sm:max-h-[95vh] flex flex-col lg:flex-row overflow-hidden shadow-2xl" onClick={(e) => e.stopPropagation()}>
            <div className="flex-grow bg-ui-background flex items-center justify-center p-4 lg:p-6 overflow-auto">
              {loadingPosters ? (
                <Loader2 className="w-10 h-10 text-brand-primary animate-spin" />
              ) : activeTemplate && activeTemplate.styles && data ? (
                <div className="w-full max-w-full sm:max-w-md md:max-w-lg lg:max-w-xl xl:max-w-2xl mx-auto">
                    <div className="shadow-2xl w-full bg-white" style={{ aspectRatio: `${activeTemplate.width || 1} / ${activeTemplate.height || 1}` }}>
                        <DynamicPoster template={activeTemplate} styles={activeTemplate.styles} program={data.program} winners={data.winners} resultNumber={data.resultNumber} />
                    </div>
                </div>
              ) : (
                <div className="text-ui-text-primary text-center">
                  <p>No active poster designs found.</p>
                  <p className="text-sm text-ui-text-secondary">Please activate a design in the admin panel.</p>
                </div>
              )}
            </div>

            <div className="w-full lg:w-72 bg-ui-surface border-t lg:border-t-0 lg:border-l border-ui-border p-4 lg:p-6 flex flex-col justify-between flex-shrink-0">
              <div>
                <h3 className="text-ui-text-primary text-xl font-bold mb-1">Result Poster</h3>
                <p className="text-ui-text-secondary text-sm mb-6">Download or share this result</p>
                <div className="space-y-4">
                  <button onClick={handleDownloadClick} disabled={isDownloading || loadingPosters || !activeTemplate} className="w-full bg-brand-accent text-white font-bold py-3 px-4 rounded-lg flex items-center justify-center gap-2 hover:brightness-110 transition-colors disabled:opacity-50">
                    {isDownloading ? <Loader2 className="w-5 h-5 animate-spin" /> : <Download className="w-5 h-5" />}
                    {isDownloading ? 'Downloading...' : 'Download Poster'}
                  </button>
                  <button onClick={handleShare} disabled={loadingPosters || !activeTemplate} className="w-full bg-brand-primary text-white font-bold py-3 px-4 rounded-lg flex items-center justify-center gap-2 hover:bg-opacity-90 transition-colors disabled:opacity-50">
                    <Share2 className="w-5 h-5" />
                    Share Result
                  </button>
                </div>
              </div>

              <div>
                <p className="text-ui-text-secondary text-sm text-center mb-2">Change Style</p>
                <div className="flex items-center justify-between">
                  <button onClick={prevStyle} disabled={loadingPosters || activeTemplates.length <= 1} className="p-3 bg-ui-background rounded-full hover:bg-gray-200 text-ui-text-primary disabled:opacity-50"><ArrowLeft size={20} /></button>
                  <span className="text-ui-text-primary font-mono">{loadingPosters ? '-/-' : `${activeStyle + 1} / ${activeTemplates.length}`}</span>
                  <button onClick={nextStyle} disabled={loadingPosters || activeTemplates.length <= 1} className="p-3 bg-ui-background rounded-full hover:bg-gray-200 text-ui-text-primary disabled:opacity-50"><ArrowRight size={20} /></button>
                </div>
              </div>
            </div>
            <button onClick={onClose} className="absolute top-4 right-4 text-ui-text-primary bg-white/80 backdrop-blur-sm p-2 rounded-full hover:bg-white z-10"><X size={24} /></button>
          </motion.div>
        </motion.div>
      )}
    </AnimatePresence>
  );
};

export default PosterModal;
